/*
 * generated by Xtext 2.16.0
 */
package de.htw.activity.xtext.serializer;

import com.google.inject.Inject;
import de.htw.activity.emf.activity.AcceptEventAction;
import de.htw.activity.emf.activity.AcceptTimeEventAction;
import de.htw.activity.emf.activity.Activity;
import de.htw.activity.emf.activity.ActivityFinalNode;
import de.htw.activity.emf.activity.ActivityPackage;
import de.htw.activity.emf.activity.ActivityParameterNode;
import de.htw.activity.emf.activity.ActivityPartition;
import de.htw.activity.emf.activity.CentralBufferNode;
import de.htw.activity.emf.activity.Connector;
import de.htw.activity.emf.activity.ControlFlow;
import de.htw.activity.emf.activity.DataStoreNode;
import de.htw.activity.emf.activity.DecisionNode;
import de.htw.activity.emf.activity.FlowFinalNode;
import de.htw.activity.emf.activity.ForkNode;
import de.htw.activity.emf.activity.InitialNode;
import de.htw.activity.emf.activity.InputPin;
import de.htw.activity.emf.activity.InterruptEdge;
import de.htw.activity.emf.activity.InterruptibleActivityRegion;
import de.htw.activity.emf.activity.JoinNode;
import de.htw.activity.emf.activity.MergeNode;
import de.htw.activity.emf.activity.ObjectFlow;
import de.htw.activity.emf.activity.OutputPin;
import de.htw.activity.emf.activity.SendSignalAction;
import de.htw.activity.xtext.services.ActivityDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class ActivityDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ActivityDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ActivityPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ActivityPackage.ACCEPT_EVENT_ACTION:
				sequence_AcceptEventAction(context, (AcceptEventAction) semanticObject); 
				return; 
			case ActivityPackage.ACCEPT_TIME_EVENT_ACTION:
				sequence_AcceptTimeEventAction(context, (AcceptTimeEventAction) semanticObject); 
				return; 
			case ActivityPackage.ACTION:
				sequence_Action(context, (de.htw.activity.emf.activity.Action) semanticObject); 
				return; 
			case ActivityPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case ActivityPackage.ACTIVITY_FINAL_NODE:
				sequence_ActivityFinalNode(context, (ActivityFinalNode) semanticObject); 
				return; 
			case ActivityPackage.ACTIVITY_PARAMETER_NODE:
				sequence_ActivityParameterNode(context, (ActivityParameterNode) semanticObject); 
				return; 
			case ActivityPackage.ACTIVITY_PARTITION:
				sequence_ActivityPartition(context, (ActivityPartition) semanticObject); 
				return; 
			case ActivityPackage.CENTRAL_BUFFER_NODE:
				sequence_CentralBufferNode(context, (CentralBufferNode) semanticObject); 
				return; 
			case ActivityPackage.CONNECTOR:
				sequence_Connector(context, (Connector) semanticObject); 
				return; 
			case ActivityPackage.CONTROL_FLOW:
				sequence_ControlFlow(context, (ControlFlow) semanticObject); 
				return; 
			case ActivityPackage.DATA_STORE_NODE:
				sequence_DataStoreNode(context, (DataStoreNode) semanticObject); 
				return; 
			case ActivityPackage.DECISION_NODE:
				sequence_DecisionNode(context, (DecisionNode) semanticObject); 
				return; 
			case ActivityPackage.FLOW_FINAL_NODE:
				sequence_FlowFinalNode(context, (FlowFinalNode) semanticObject); 
				return; 
			case ActivityPackage.FORK_NODE:
				sequence_ForkNode(context, (ForkNode) semanticObject); 
				return; 
			case ActivityPackage.INITIAL_NODE:
				sequence_InitialNode(context, (InitialNode) semanticObject); 
				return; 
			case ActivityPackage.INPUT_PIN:
				sequence_InputPin(context, (InputPin) semanticObject); 
				return; 
			case ActivityPackage.INTERRUPT_EDGE:
				sequence_InterruptEdge(context, (InterruptEdge) semanticObject); 
				return; 
			case ActivityPackage.INTERRUPTIBLE_ACTIVITY_REGION:
				sequence_InterruptibleActivityRegion(context, (InterruptibleActivityRegion) semanticObject); 
				return; 
			case ActivityPackage.JOIN_NODE:
				sequence_JoinNode(context, (JoinNode) semanticObject); 
				return; 
			case ActivityPackage.MERGE_NODE:
				sequence_MergeNode(context, (MergeNode) semanticObject); 
				return; 
			case ActivityPackage.OBJECT:
				sequence_Object(context, (de.htw.activity.emf.activity.Object) semanticObject); 
				return; 
			case ActivityPackage.OBJECT_FLOW:
				sequence_ObjectFlow(context, (ObjectFlow) semanticObject); 
				return; 
			case ActivityPackage.OUTPUT_PIN:
				sequence_OutputPin(context, (OutputPin) semanticObject); 
				return; 
			case ActivityPackage.SEND_SIGNAL_ACTION:
				sequence_SendSignalAction(context, (SendSignalAction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActivityNode returns AcceptEventAction
	 *     AcceptEventAction returns AcceptEventAction
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_AcceptEventAction(ISerializationContext context, AcceptEventAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns AcceptTimeEventAction
	 *     AcceptTimeEventAction returns AcceptTimeEventAction
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_AcceptTimeEventAction(ISerializationContext context, AcceptTimeEventAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns Action
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)? 
	 *         (output+=OutputPin output+=OutputPin*)? 
	 *         (input+=InputPin input+=InputPin*)?
	 *     )
	 */
	protected void sequence_Action(ISerializationContext context, de.htw.activity.emf.activity.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns ActivityFinalNode
	 *     ActivityFinalNode returns ActivityFinalNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_ActivityFinalNode(ISerializationContext context, ActivityFinalNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityParameterNode returns ActivityParameterNode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (activityPartion+=[ActivityPartition|EString] activityPartion+=[ActivityPartition|EString]*)? 
	 *         (edges+=ActivityEdge edges+=ActivityEdge*)? 
	 *         (nodes+=ActivityNode nodes+=ActivityNode*)? 
	 *         activityparameternode=ActivityParameterNode? 
	 *         (activityGroups+=ActivityGroup activityGroups+=ActivityGroup*)? 
	 *         (inBorder+=ActivityNode inBorder+=ActivityNode*)?
	 *     )
	 */
	protected void sequence_ActivityParameterNode(ISerializationContext context, ActivityParameterNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityGroup returns ActivityPartition
	 *     ActivityPartition returns ActivityPartition
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (activityPartion+=[ActivityPartition|EString] activityPartion+=[ActivityPartition|EString]*)? 
	 *         (edges+=ActivityEdge edges+=ActivityEdge*)? 
	 *         (nodes+=ActivityNode nodes+=ActivityNode*)? 
	 *         activityparameternode=ActivityParameterNode? 
	 *         (activityGroups+=ActivityGroup activityGroups+=ActivityGroup*)? 
	 *         (activityPartions+=ActivityPartition activityPartions+=ActivityPartition*)?
	 *     )
	 */
	protected void sequence_ActivityPartition(ISerializationContext context, ActivityPartition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     (
	 *         (activityPartion+=[ActivityPartition|EString] activityPartion+=[ActivityPartition|EString]*)? 
	 *         (edges+=ActivityEdge edges+=ActivityEdge*)? 
	 *         (nodes+=ActivityNode nodes+=ActivityNode*)? 
	 *         activityparameternode=ActivityParameterNode? 
	 *         (activityGroups+=ActivityGroup activityGroups+=ActivityGroup*)?
	 *     )
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns CentralBufferNode
	 *     CentralBufferNode returns CentralBufferNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_CentralBufferNode(ISerializationContext context, CentralBufferNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns Connector
	 *     Connector returns Connector
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)? 
	 *         connected=[Connector|EString]?
	 *     )
	 */
	protected void sequence_Connector(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityEdge returns ControlFlow
	 *     ControlFlow returns ControlFlow
	 *
	 * Constraint:
	 *     (qualifiedName=ID Name=EString? target=[ActivityNode|EString]? source=[ActivityNode|EString]?)
	 */
	protected void sequence_ControlFlow(ISerializationContext context, ControlFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns DataStoreNode
	 *     DataStoreNode returns DataStoreNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_DataStoreNode(ISerializationContext context, DataStoreNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_DecisionNode(ISerializationContext context, DecisionNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns FlowFinalNode
	 *     FlowFinalNode returns FlowFinalNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_FlowFinalNode(ISerializationContext context, FlowFinalNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_ForkNode(ISerializationContext context, ForkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns InitialNode
	 *     InitialNode returns InitialNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_InitialNode(ISerializationContext context, InitialNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns InputPin
	 *     InputPin returns InputPin
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_InputPin(ISerializationContext context, InputPin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityEdge returns InterruptEdge
	 *     InterruptEdge returns InterruptEdge
	 *
	 * Constraint:
	 *     (qualifiedName=ID Name=EString? target=[ActivityNode|EString]? source=[ActivityNode|EString]?)
	 */
	protected void sequence_InterruptEdge(ISerializationContext context, InterruptEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityGroup returns InterruptibleActivityRegion
	 *     InterruptibleActivityRegion returns InterruptibleActivityRegion
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (activityPartion+=[ActivityPartition|EString] activityPartion+=[ActivityPartition|EString]*)? 
	 *         (edges+=ActivityEdge edges+=ActivityEdge*)? 
	 *         (nodes+=ActivityNode nodes+=ActivityNode*)? 
	 *         activityparameternode=ActivityParameterNode? 
	 *         (activityGroups+=ActivityGroup activityGroups+=ActivityGroup*)?
	 *     )
	 */
	protected void sequence_InterruptibleActivityRegion(ISerializationContext context, InterruptibleActivityRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_JoinNode(ISerializationContext context, JoinNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns MergeNode
	 *     MergeNode returns MergeNode
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_MergeNode(ISerializationContext context, MergeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityEdge returns ObjectFlow
	 *     ObjectFlow returns ObjectFlow
	 *
	 * Constraint:
	 *     (qualifiedName=ID Name=EString? target=[ActivityNode|EString]? source=[ActivityNode|EString]?)
	 */
	protected void sequence_ObjectFlow(ISerializationContext context, ObjectFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns Object
	 *     Object returns Object
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_Object(ISerializationContext context, de.htw.activity.emf.activity.Object semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns OutputPin
	 *     OutputPin returns OutputPin
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_OutputPin(ISerializationContext context, OutputPin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns SendSignalAction
	 *     SendSignalAction returns SendSignalAction
	 *
	 * Constraint:
	 *     (
	 *         qualifiedName=ID 
	 *         Name=EString? 
	 *         (incoming+=[ActivityEdge|EString] incoming+=[ActivityEdge|EString]*)? 
	 *         (outgoing+=[ActivityEdge|EString] outgoing+=[ActivityEdge|EString]*)?
	 *     )
	 */
	protected void sequence_SendSignalAction(ISerializationContext context, SendSignalAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
