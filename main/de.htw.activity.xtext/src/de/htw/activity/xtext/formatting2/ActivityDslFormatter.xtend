/*
 * generated by Xtext 2.16.0
 */
package de.htw.activity.xtext.formatting2

import com.google.inject.Inject
import de.htw.activity.emf.activity.Activity
import de.htw.activity.xtext.services.ActivityDslGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import de.htw.activity.emf.activity.ActivityEdge
import de.htw.activity.emf.activity.ControlFlow
import de.htw.activity.emf.activity.InterruptEdge
import de.htw.activity.emf.activity.ObjectFlow
import de.htw.activity.emf.activity.ActivityNode
import de.htw.activity.emf.activity.ControlNode
import de.htw.activity.emf.activity.ExecutableNode
import de.htw.activity.emf.activity.ObjectNode
import de.htw.activity.emf.activity.Object
import de.htw.activity.emf.activity.InitialNode
import de.htw.activity.emf.activity.Connector
import de.htw.activity.emf.activity.FinalNode
import de.htw.activity.emf.activity.ForkNode
import de.htw.activity.emf.activity.JoinNode
import de.htw.activity.emf.activity.MergeNode
import de.htw.activity.emf.activity.DecisionNode
import de.htw.activity.emf.activity.FlowFinalNode
import de.htw.activity.emf.activity.ActivityFinalNode
import de.htw.activity.emf.activity.Action
import de.htw.activity.emf.activity.SendSignalAction
import de.htw.activity.emf.activity.AcceptTimeEventAction
import de.htw.activity.emf.activity.AcceptEventAction
import de.htw.activity.emf.activity.CentralBufferNode
import de.htw.activity.emf.activity.DataStoreNode
import de.htw.activity.emf.activity.OutputPin
import de.htw.activity.emf.activity.InputPin
import de.htw.activity.emf.activity.Activity
import de.htw.activity.emf.activity.ActivityParameterNode
import de.htw.activity.xtext.services.ActivityDslGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class ActivityDslFormatter extends AbstractFormatter2 {
	
	@Inject extension ActivityDslGrammarAccess

def dispatch void format(Activity activity, extension IFormattableDocument document) {
		val open = activity.regionFor.keyword(activityAccess.leftCurlyBracketKeyword_2)
		val close = activity.regionFor.keyword(activityAccess.rightCurlyBracketKeyword_8)
		open.append[newLine]
		interior(open, close)[indent]
		
		//edges{
		//tap edges
		//}
		if(activity.edges.size != 0){
			val openEdges = activity.regionFor.keyword(activityAccess.leftCurlyBracketKeyword_4_1).append[setNewLines(1,1,1)]
			val closeEdges = activity.regionFor.keyword(activityAccess.rightCurlyBracketKeyword_4_4).append[setNewLines(2,2,2)]
			open.append[newLine]
			interior(openEdges, closeEdges)[indent]
		
		
			val lastEdge = activity.edges.last
			for(edge : activity.edges){
				edge.format
				
				if(activity.edges.size == 1){
					
				}
				else{
					if(edge === lastEdge){
						edge.prepend[setNewLines(2)]
						edge.append[setNewLines(1)]
					}
					else{
						//vor jedem egde
						if(edge.equals(activity.edges.get(0))){
						edge.prepend[setNewLines(1)]
						}
						else{
							edge.prepend[setNewLines(2)]
						}	
					}
				}
			}
		}
		
		//nodes{
		//tap nodes
		//}
		val openNodes = activity.regionFor.keyword(activityAccess.leftCurlyBracketKeyword_5_1).append[setNewLines(1,1,1)]
		val closeNodes = activity.regionFor.keyword(activityAccess.rightCurlyBracketKeyword_5_4).append[setNewLines(1,1,1)]
		open.append[newLine]
		interior(openNodes, closeNodes)[indent]
		
		val lastNode = activity.nodes.last
		for(node : activity.nodes){
			node.format
			
			if(activity.nodes.size==1){
				node.append[setNewLines(1,1,1)]
			}
			else{
				if(node === lastNode){
					node.prepend[setNewLines(2)]
					node.append[setNewLines(1,1,1)]
				}
				else{
					//vor jedem node
					if(node.equals(activity.nodes.get(0))){
						node.prepend[setNewLines(1)]
					}
					else{
						node.prepend[setNewLines(2)]
					}
				}
			}
			activity.regionFor.keyword(activityAccess.commaKeyword_5_3_0).surround[noSpace]
		}	
		
	}
	
	
//----------------------------------
//Switch
//----------------------------------
	
	def dispatch void format(ActivityEdge edge, extension IFormattableDocument document) {
		switch edge {
			ControlFlow: {
				edge.format
			}
			ObjectFlow:{
				edge.format	
			}
			InterruptEdge:{
				edge.format
			}
		}
	}
	
	def dispatch void format(ActivityNode node, extension IFormattableDocument document) {
		switch node {
			ControlNode:{
				node.format
			}
			ExecutableNode:{
				node.format
			}
			ObjectNode:{
				node.format
			}
		}
	}
	
	def dispatch void format(ControlNode node, extension IFormattableDocument document){
		switch node{
			InitialNode:{
				node.format
			}
			Connector:{
				node.format
			}
			FinalNode:{
				node.format
			}
			ForkNode:{
				node.format
			}
			JoinNode:{
				node.format
			}
			MergeNode:{
				node.format
			}
			DecisionNode:{
				node.format
			}
		}
	}
	
	def dispatch void format(FinalNode node, extension IFormattableDocument document){
		switch node{
			FlowFinalNode:{
				node.format
			}
			ActivityFinalNode:{
				node.format
			}
		}
	}
	
	def dispatch void format(ExecutableNode node, extension IFormattableDocument document){
		switch node{
			Action:{
				node.format
			}
			SendSignalAction:{
				node.format
			}
			AcceptTimeEventAction:{
				node.format
			}
			AcceptEventAction:{
				node.format
			}
		}
	}
	
	def dispatch void format(ObjectNode node, extension IFormattableDocument document){
		switch node{
			CentralBufferNode:{
				node.format	
			}
			DataStoreNode:{
				node.format
			}
			Object:{
				node.format
			}
		}
	}
	
//----------------------------------
//Edges
//----------------------------------
	def dispatch void format(ControlFlow flow, extension IFormattableDocument document){
		val open = flow.regionFor.keyword(controlFlowAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = flow.regionFor.keyword(controlFlowAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		flow.regionFor.assignment(controlFlowAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after target
		flow.regionFor.assignment(controlFlowAccess.targetAssignment_5_1).append[setNewLines(1,1,2)]
		
		//new line after source
		flow.regionFor.assignment(controlFlowAccess.sourceAssignment_6_1).append[setNewLines(1,1,2)]
	}
	
	def dispatch void format(ObjectFlow flow, extension IFormattableDocument document){
		val open = flow.regionFor.keyword(objectFlowAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = flow.regionFor.keyword(objectFlowAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		flow.regionFor.assignment(objectFlowAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after target
		flow.regionFor.assignment(objectFlowAccess.targetAssignment_5_1).append[setNewLines(1,1,2)]
		
		//new line after source
		flow.regionFor.assignment(objectFlowAccess.sourceAssignment_6_1).append[setNewLines(1,1,2)]
	}
	
	def dispatch void format(InterruptEdge flow, extension IFormattableDocument document){
		val open = flow.regionFor.keyword(interruptEdgeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = flow.regionFor.keyword(interruptEdgeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		flow.regionFor.assignment(interruptEdgeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after target
		flow.regionFor.assignment(interruptEdgeAccess.targetAssignment_5_1).append[setNewLines(1,1,2)]
		
		//new line after source
		flow.regionFor.assignment(interruptEdgeAccess.sourceAssignment_6_1).append[setNewLines(1,1,2)]
	}
	
//----------------------------------
//Nodes
//----------------------------------
	
	//----------------------------------
	//ControlNodes
	//----------------------------------
	
	//INITIAL NODE
	def dispatch void format(InitialNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(initialNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(initialNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
//		node.regionFor.assignment(initialNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		node.regionFor.assignment(initialNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(initialNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(initialNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(initialNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(initialNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//CONNECTOR
	def dispatch void format(Connector node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(connectorAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(connectorAccess.rightCurlyBracketKeyword_8)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(connectorAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(connectorAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(connectorAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(connectorAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(connectorAccess.commaKeyword_6_3_0).surround[noSpace]

		//new line after connected
		node.regionFor.keyword(connectorAccess.connectedKeyword_7_0).append[setNewLines(1,1,2)]
	}
	
	//FLOW FINAL NODE
	def dispatch void format(FlowFinalNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(flowFinalNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(flowFinalNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(flowFinalNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(flowFinalNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(flowFinalNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(flowFinalNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(flowFinalNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//ACIVITY FINAL NODE
	def dispatch void format(ActivityFinalNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(activityFinalNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(activityFinalNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(activityFinalNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(activityFinalNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(activityFinalNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(activityFinalNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(activityFinalNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//FORK NODE
	def dispatch void format(ForkNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(forkNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(forkNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(forkNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(forkNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(forkNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(forkNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(forkNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//JOIN NODE
	def dispatch void format(JoinNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(joinNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(joinNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(joinNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(joinNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(joinNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(joinNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(joinNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//MERGE NODE
	def dispatch void format(MergeNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(mergeNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(mergeNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(mergeNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(mergeNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(mergeNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(mergeNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(mergeNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//DECISION NODE
	def dispatch void format(DecisionNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(decisionNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(decisionNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(decisionNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(decisionNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(decisionNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(decisionNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(decisionNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//----------------------------------
	//ExcutableNodes
	//----------------------------------
	
	//ACTION
	def dispatch void format(Action action, extension IFormattableDocument document){
		val open = action.regionFor.keyword(actionAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = action.regionFor.keyword(actionAccess.rightCurlyBracketKeyword_9)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		action.regionFor.assignment(actionAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		action.regionFor.keyword(actionAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		action.regionFor.keyword(actionAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		action.regionFor.keyword(actionAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		action.regionFor.keyword(actionAccess.commaKeyword_6_3_0).surround[noSpace]
		
		//ouput{
		//tap pins
		//}
		val openOutput = action.regionFor.keyword(actionAccess.leftCurlyBracketKeyword_7_1).append[setNewLines(1,1,1)]
		val closeOutput = action.regionFor.keyword(actionAccess.rightCurlyBracketKeyword_7_4)
		open.append[newLine]
		interior(openOutput, closeOutput)[indent]
		
		val lastOutputPin = action.output.last
		for(pin : action.output){
			pin.format
			
			if(pin === lastOutputPin && action.output.size!==1){
				pin.prepend[setNewLines(2)]
				pin.append[setNewLines(1,1,1)]
			}
			else{
				//vor jedem pin
				if(pin.equals(action.output.get(0))){
					pin.prepend[setNewLines(1)]
				}
				else{
					pin.prepend[setNewLines(2)]
				}
			}
		}	
		
		action.regionFor.keyword(actionAccess.rightCurlyBracketKeyword_7_4).append[setNewLines(1,1,1)]
		
		//comma between pin
		//no space between pin{...},
		action.regionFor.keyword(actionAccess.commaKeyword_7_3_0).surround[noSpace]
		//to new lines after ,
		action.regionFor.keyword(actionAccess.commaKeyword_7_3_0).append[setNewLines(2,2,2)]
		
		//input{
		//tap pins
		//}
		val openInput = action.regionFor.keyword(actionAccess.leftCurlyBracketKeyword_8_1).append[setNewLines(1,1,1)]
		val closeInput = action.regionFor.keyword(actionAccess.rightCurlyBracketKeyword_8_4)
		open.append[newLine]
		interior(openInput, closeInput)[indent]
		
		
		val lastInputPin = action.input.last
		for(pin : action.input){
			pin.format
			
			if(pin === lastInputPin && action.input.size!==1){
				pin.prepend[setNewLines(2)]
				pin.append[setNewLines(1,1,1)]
			}
			else{
				//vor jedem pin
				if(pin.equals(action.output.get(0))){
					pin.prepend[setNewLines(1)]
				}
				else{
					pin.prepend[setNewLines(2)]
				}
			}
		}
		
		action.regionFor.keyword(actionAccess.rightCurlyBracketKeyword_8_4).append[setNewLines(1,1,1)]
		
		//comma between pin
		//no space between pin{...},
		action.regionFor.keyword(actionAccess.commaKeyword_8_3_0).surround[noSpace]
		//to new lines after ,
		action.regionFor.keyword(actionAccess.commaKeyword_8_3_0).append[setNewLines(2,2,2)]
	}
	
	//SEND SIGNAL ACTION
	def dispatch void format(SendSignalAction action, extension IFormattableDocument document){
		val open = action.regionFor.keyword(sendSignalActionAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = action.regionFor.keyword(sendSignalActionAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		action.regionFor.assignment(sendSignalActionAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		action.regionFor.keyword(sendSignalActionAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		action.regionFor.keyword(sendSignalActionAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		action.regionFor.keyword(sendSignalActionAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		action.regionFor.keyword(sendSignalActionAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//ACCEPT TIME EVENT ACTION
	def dispatch void format(AcceptTimeEventAction action, extension IFormattableDocument document){
		val open = action.regionFor.keyword(acceptTimeEventActionAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = action.regionFor.keyword(acceptTimeEventActionAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		action.regionFor.assignment(acceptTimeEventActionAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		action.regionFor.keyword(acceptTimeEventActionAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		action.regionFor.keyword(acceptTimeEventActionAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		action.regionFor.keyword(acceptTimeEventActionAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		action.regionFor.keyword(acceptTimeEventActionAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//ACCEPT EVENT ACTION
	def dispatch void format(AcceptEventAction action, extension IFormattableDocument document){
		val open = action.regionFor.keyword(acceptEventActionAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = action.regionFor.keyword(acceptEventActionAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		action.regionFor.assignment(acceptEventActionAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		action.regionFor.keyword(acceptEventActionAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		action.regionFor.keyword(acceptEventActionAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		action.regionFor.keyword(acceptEventActionAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		action.regionFor.keyword(acceptEventActionAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//----------------------------------
	//ObjectNodes
	//----------------------------------
	
	//OBJECT
	def dispatch void format(Object node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(objectAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(objectAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(objectAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(objectAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(objectAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(objectAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(objectAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//CENTRAL BUFFER NODE
	def dispatch void format(CentralBufferNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(centralBufferNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(centralBufferNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(centralBufferNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(centralBufferNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(centralBufferNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(centralBufferNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(centralBufferNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//DATA STORE NODE
	def dispatch void format(DataStoreNode node, extension IFormattableDocument document){
		val open = node.regionFor.keyword(dataStoreNodeAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = node.regionFor.keyword(dataStoreNodeAccess.rightCurlyBracketKeyword_7)
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		node.regionFor.assignment(dataStoreNodeAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		node.regionFor.keyword(dataStoreNodeAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		node.regionFor.keyword(dataStoreNodeAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		node.regionFor.keyword(dataStoreNodeAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		node.regionFor.keyword(dataStoreNodeAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//----------------------------------
	//Pins
	//----------------------------------
	
	//OUTPUT PIN
	def dispatch void format(OutputPin pin, extension IFormattableDocument document){
		val open = pin.regionFor.keyword(outputPinAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = pin.regionFor.keyword(outputPinAccess.rightCurlyBracketKeyword_7).append[setNewLines(1,1,1)]
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		pin.regionFor.assignment(outputPinAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		pin.regionFor.keyword(outputPinAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		pin.regionFor.keyword(outputPinAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		pin.regionFor.keyword(outputPinAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		pin.regionFor.keyword(outputPinAccess.commaKeyword_6_3_0).surround[noSpace]
	}
	
	//OUTPUT PIN
	def dispatch void format(InputPin pin, extension IFormattableDocument document){
		val open = pin.regionFor.keyword(inputPinAccess.leftCurlyBracketKeyword_3).append[setNewLines(1,1,1)]
		val close = pin.regionFor.keyword(inputPinAccess.rightCurlyBracketKeyword_7).append[setNewLines(1,1,1)]
		open.append[newLine]
		interior(open, close)[indent]
		
		//new line after name
		pin.regionFor.assignment(inputPinAccess.nameAssignment_4_1).append[setNewLines(1,1,2)]
		
		//new line after incoming(...)
		pin.regionFor.keyword(inputPinAccess.rightParenthesisKeyword_5_4).append[setNewLines(1,1,2)]
		//no space between commas and egdes
		pin.regionFor.keyword(inputPinAccess.commaKeyword_5_3_0).surround[noSpace]
		
		//new line after outgoing(...)
		pin.regionFor.keyword(inputPinAccess.rightParenthesisKeyword_6_4).append[setNewLines(1,1,2)]
		//no space between commas and edges
		pin.regionFor.keyword(inputPinAccess.commaKeyword_6_3_0).surround[noSpace]
	}
}
