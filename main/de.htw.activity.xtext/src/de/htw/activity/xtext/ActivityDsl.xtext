// automatically generated by Xtext
grammar de.htw.activity.xtext.ActivityDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/activity" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Activity returns Activity:
	{Activity}
	'Activity'
	'{'
		('activityPartion' '(' activityPartion+=[ActivityPartition|EString] ( "," activityPartion+=[ActivityPartition|EString])* ')' )?
		('edges' '{' edges+=ActivityEdge ( "," edges+=ActivityEdge)* '}' )?
		('nodes' '{' nodes+=ActivityNode ( "," nodes+=ActivityNode)* '}' )?
		('activityparameternode' activityparameternode=ActivityParameterNode)?
		('activityGroups' '{' activityGroups+=ActivityGroup ( "," activityGroups+=ActivityGroup)* '}' )?
	'}';

ActivityEdge returns ActivityEdge:
	ControlFlow | ObjectFlow | InterruptEdge;

ActivityNode returns ActivityNode:
	InitialNode | ForkNode | JoinNode | Connector | MergeNode | DecisionNode | FlowFinalNode | ActivityFinalNode | Action | SendSignalAction | AcceptTimeEventAction | AcceptEventAction | InputPin | OutputPin | Object | CentralBufferNode | DataStoreNode;



ActivityGroup returns ActivityGroup:
	ActivityPartition | InterruptibleActivityRegion;




ActivityParameterNode returns ActivityParameterNode:
	{ActivityParameterNode}
	'ActivityParameterNode'
	name=EString
	'{'
		('activityPartion' '(' activityPartion+=[ActivityPartition|EString] ( "," activityPartion+=[ActivityPartition|EString])* ')' )?
		('edges' '{' edges+=ActivityEdge ( "," edges+=ActivityEdge)* '}' )?
		('nodes' '{' nodes+=ActivityNode ( "," nodes+=ActivityNode)* '}' )?
		('activityparameternode' activityparameternode=ActivityParameterNode)?
		('activityGroups' '{' activityGroups+=ActivityGroup ( "," activityGroups+=ActivityGroup)* '}' )?
		('inBorder' '{' inBorder+=ActivityNode ( "," inBorder+=ActivityNode)* '}' )?
	'}';

ActivityPartition returns ActivityPartition:
	{ActivityPartition}
	'ActivityPartition'
	name=EString
	'{'
		('activityPartion' '(' activityPartion+=[ActivityPartition|EString] ( "," activityPartion+=[ActivityPartition|EString])* ')' )?
		('edges' '{' edges+=ActivityEdge ( "," edges+=ActivityEdge)* '}' )?
		('nodes' '{' nodes+=ActivityNode ( "," nodes+=ActivityNode)* '}' )?
		('activityparameternode' activityparameternode=ActivityParameterNode)?
		('activityGroups' '{' activityGroups+=ActivityGroup ( "," activityGroups+=ActivityGroup)* '}' )?
		('activityPartions' '{' activityPartions+=ActivityPartition ( "," activityPartions+=ActivityPartition)* '}' )?
	'}';

InterruptibleActivityRegion returns InterruptibleActivityRegion:
	{InterruptibleActivityRegion}
	'InterruptibleActivityRegion'
	name=EString
	'{'
		('activityPartion' '(' activityPartion+=[ActivityPartition|EString] ( "," activityPartion+=[ActivityPartition|EString])* ')' )?
		('edges' '{' edges+=ActivityEdge ( "," edges+=ActivityEdge)* '}' )?
		('nodes' '{' nodes+=ActivityNode ( "," nodes+=ActivityNode)* '}' )?
		('activityparameternode' activityparameternode=ActivityParameterNode)?
		('activityGroups' '{' activityGroups+=ActivityGroup ( "," activityGroups+=ActivityGroup)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

ControlFlow returns ControlFlow:
	{ControlFlow}
	'ControlFlow'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('target' target=[ActivityNode|EString])?
		('source' source=[ActivityNode|EString])?
	'}';

ObjectFlow returns ObjectFlow:
	{ObjectFlow}
	'ObjectFlow'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('target' target=[ActivityNode|EString])?
		('source' source=[ActivityNode|EString])?
	'}';

InterruptEdge returns InterruptEdge:
	{InterruptEdge}
	'InterruptEdge'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('target' target=[ActivityNode|EString])?
		('source' source=[ActivityNode|EString])?
	'}';

InitialNode returns InitialNode:
	{InitialNode}
	'InitialNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

ForkNode returns ForkNode:
	{ForkNode}
	'ForkNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

JoinNode returns JoinNode:
	{JoinNode}
	'JoinNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

Connector returns Connector:
	{Connector}
	'Connector'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
		('connected' connected=[Connector|EString])?
	'}';

MergeNode returns MergeNode:
	{MergeNode}
	'MergeNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

DecisionNode returns DecisionNode:
	{DecisionNode}
	'DecisionNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

FlowFinalNode returns FlowFinalNode:
	{FlowFinalNode}
	'FlowFinalNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

ActivityFinalNode returns ActivityFinalNode:
	{ActivityFinalNode}
	'ActivityFinalNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

Action returns Action:
	{Action}
	'Action'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
		('output' '{' output+=OutputPin ( "," output+=OutputPin)* '}' )?
		('input' '{' input+=InputPin ( "," input+=InputPin)* '}' )?
	'}';

SendSignalAction returns SendSignalAction:
	{SendSignalAction}
	'SendSignalAction'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

AcceptTimeEventAction returns AcceptTimeEventAction:
	{AcceptTimeEventAction}
	'AcceptTimeEventAction'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

AcceptEventAction returns AcceptEventAction:
	{AcceptEventAction}
	'AcceptEventAction'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

InputPin returns InputPin:
	{InputPin}
	'InputPin'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

OutputPin returns OutputPin:
	{OutputPin}
	'OutputPin'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

Object returns Object:
	{Object}
	'Object'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

CentralBufferNode returns CentralBufferNode:
	{CentralBufferNode}
	'CentralBufferNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';

DataStoreNode returns DataStoreNode:
	{DataStoreNode}
	'DataStoreNode'
	qualifiedName = ID
	'{'
		('Name' Name=EString)?
		('incoming' '(' incoming+=[ActivityEdge|EString] ( "," incoming+=[ActivityEdge|EString])* ')' )?
		('outgoing' '(' outgoing+=[ActivityEdge|EString] ( "," outgoing+=[ActivityEdge|EString])* ')' )?
	'}';
