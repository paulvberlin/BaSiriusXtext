/*
 * generated by Xtext 2.16.0
 */
package de.htw.activity.xtext.validation

import static extension java.lang.Character.* 

import de.htw.activity.emf.activity.ActivityNode
import org.eclipse.xtext.validation.Check
import de.htw.activity.emf.activity.ActivityPackage
import de.htw.activity.emf.activity.InitialNode
import de.htw.activity.emf.activity.Action
import de.htw.activity.emf.activity.FlowFinalNode
import de.htw.activity.emf.activity.ActivityFinalNode
import de.htw.activity.emf.activity.ForkNode
import de.htw.activity.emf.activity.JoinNode
import de.htw.activity.emf.activity.MergeNode
import de.htw.activity.emf.activity.DecisionNode
import de.htw.activity.emf.activity.ActivityParameterNode
import de.htw.activity.emf.activity.DataStoreNode
import de.htw.activity.emf.activity.CentralBufferNode
import de.htw.activity.emf.activity.Connector
import de.htw.activity.emf.activity.ActivityEdge
import de.htw.activity.emf.activity.ControlFlow
import de.htw.activity.emf.activity.ObjectFlow
import de.htw.activity.emf.activity.FinalNode
import de.htw.activity.emf.activity.ExecutableNode
import de.htw.activity.emf.activity.InputPin
import de.htw.activity.emf.activity.OutputPin

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ActivityDslValidator extends AbstractActivityDslValidator {
	
//---------------------------------------------------------------------------------------------------------------------------
//Node
//---------------------------------------------------------------------------------------------------------------------------
	@Check 
	def nodeQualifiedNameIsNotSet(ActivityNode node){
		if(node.qualifiedName === null){
			error("Qualified name is not set in activity node '" + node.name + "'", ActivityPackage::eINSTANCE.namedElement_Name)
		}
	}
	
	@Check 
	def nodeStandAlone(ActivityNode node){
		if(node.incoming.size==0 && node.outgoing.size==0){
			//Check have action pins and have pins a connection
			if(node instanceof Action){
				for(InputPin pin : node.input){
					if(pin.incoming!==null || pin.outgoing!==null){
						return
					}
				}
				for(OutputPin pin : node.output){
					if(pin.incoming!==null || pin.outgoing!==null){
						return
					}
				}
			}
			
			warning("Node '" + node.name + "' stand alone", ActivityPackage::eINSTANCE.namedElement_QualifiedName)
		}
	}
	
	@Check
	def wrongActivityNodeQualifiedName(ActivityNode node){

		if(node.qualifiedName.length > 4){
			if(!node.qualifiedName.substring(0,4).equals("node")){
				error(node.class.name + " from '" + node.qualifiedName +"' must be contain 'node' + a digit",  ActivityPackage::eINSTANCE.namedElement_QualifiedName)
			}
		}
		else{
			error(node.class.name + " from '" + node.qualifiedName +"' must be contain 'node' + a digit",  ActivityPackage::eINSTANCE.namedElement_QualifiedName)
		}
	}

//---------------------------------------------------------------------------------------------------------------------------
//Edge
//---------------------------------------------------------------------------------------------------------------------------
	@Check
	def activityEdgeQualifiedNameIsNotSet(ActivityEdge edge){
		if(edge.qualifiedName === null){
			error("ActivityEdge '" + edge.name + "' must have a qualifiedName",  ActivityPackage::eINSTANCE.namedElement_Name)
		}
	}	
	
	@Check
	def wrongActivityEdgeQualifiedName(ActivityEdge edge){
		if(edge.qualifiedName.length > 4){
			if(!edge.qualifiedName.substring(0,4).equals("edge")){
				error(edge.class.name + " from '" + edge.qualifiedName +"' must be contain 'edge' + a digit",  ActivityPackage::eINSTANCE.namedElement_QualifiedName)
			}
		}
		else{
			error(edge.class.name + " from '" + edge.qualifiedName +"' must be contain 'edge' + a digit",  ActivityPackage::eINSTANCE.namedElement_QualifiedName)
		}
	}
	
//---------------------------------------------------------------------------------------------------------------------------
//ControlFlow
//---------------------------------------------------------------------------------------------------------------------------
	
	@Check
	def controlFlowRelationshipIsNotSet(ControlFlow flow){
		if(flow.target === null && flow.source === null){
			error("ControlFlow '" + flow.name + "' can't exist without 'target' and 'source'", ActivityPackage::eINSTANCE.namedElement_Name)
		}
		else if(flow.target === null){
			error("ControlFlow '" + flow.name + "' can't exist without 'target'", ActivityPackage::eINSTANCE.namedElement_Name)
		}
		else if(flow.source === null){
			error("ControlFlow '" + flow.name + "' can't exist without 'source'", ActivityPackage::eINSTANCE.namedElement_Name)
		}
	}
	
//---------------------------------------------------------------------------------------------------------------------------
//ObjectFlow
//---------------------------------------------------------------------------------------------------------------------------
	
	@Check
	def objectFlowRelationshipIsNotSet(ObjectFlow flow){
		if(flow.target === null && flow.source === null){
			error("ObjectFlow '" + flow.name + "' can't exist without 'target' and 'source'", ActivityPackage::eINSTANCE.namedElement_Name)
		}
		else if(flow.target === null){
			error("ObjectFlow '" + flow.name + "' can't exist without 'target'", ActivityPackage::eINSTANCE.namedElement_Name)
		}
		else if(flow.source === null){
			error("ObjectFlow '" + flow.name + "' can't exist without 'source'", ActivityPackage::eINSTANCE.namedElement_Name)
		}
	}

//---------------------------------------------------------------------------------------------------------------------------
//InitialNode
//---------------------------------------------------------------------------------------------------------------------------
	
	@Check
	def haveInitialNodeIncomingEgde(InitialNode initial){
		if(initial.incoming.size !== 0){
			error("InitialNode can't have an incoming edge", ActivityPackage::eINSTANCE.activityNode_Incoming)
		}
	}


//---------------------------------------------------------------------------------------------------------------------------
//FinalNode
//---------------------------------------------------------------------------------------------------------------------------
	
	@Check 
	def haveFinalNodeOutgoingEdge(FinalNode node){
		if(node.outgoing.size !== 0){
			error("A finalNode can't have an outgoing edge", ActivityPackage::eINSTANCE.activityNode_Outgoing)
		}
	}
	
//---------------------------------------------------------------------------------------------------------------------------
//ForkNode
//---------------------------------------------------------------------------------------------------------------------------
	
	@Check
	def haveForkNodeOneIncomingEdge(ForkNode fork){
		if(fork.incoming.size > 1){
			error("ForkNode can't have an incoming edge", ActivityPackage::eINSTANCE.activityNode_Incoming)
		}
	}
	
//---------------------------------------------------------------------------------------------------------------------------
//JoinNode
//---------------------------------------------------------------------------------------------------------------------------
	
	@Check
	def haveJoinNodeOneOutgoingEdge(JoinNode join){
		if(join.outgoing.size > 1){
			error("JoinNode can't have an outgoing edge", ActivityPackage::eINSTANCE.activityNode_Outgoing)
		}
	}

//---------------------------------------------------------------------------------------------------------------------------
//ExcutableNode
//---------------------------------------------------------------------------------------------------------------------------

	@Check
	def haveActionOneOutgoingEdge(ExecutableNode node){
		if(node.outgoing.size >= 2){
			error("Executable Node can't have two outgoing edges", ActivityPackage::eINSTANCE.activityNode_Outgoing)
		}
	}
	
	@Check
	def haveActionOneIncomingEdge(ExecutableNode node){
		if(node.incoming.size >= 2){
			error("Executable Node can't have two incoming edges", ActivityPackage::eINSTANCE.activityNode_Incoming)
		}
	}
}
